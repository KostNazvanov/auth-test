{"version":3,"sources":["reducers/index.tsx","helpers/store.tsx","helpers/utils.tsx","actions/index.tsx","components/Login/index.tsx","components/Dashboard/index.tsx","components/Settings/index.tsx","configs/routes.tsx","components/Logout/index.tsx","components/Menu/index.tsx","components/Router/index.tsx","App.tsx","helpers/firebase.tsx","sagas/index.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","user","isLoggedIn","dashboard","settings","loading","reducer","state","action","type","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","mapLoggedToProps","dispatch","createAction","payload","createAsyncAction","typeName","toLowerCase","replace","m","toUpperCase","actions","logout","connect","props","to","onFinish","values","login","Item","label","name","rules","required","message","Password","htmlType","Dashboard","componentDidMount","getDashboard","render","content","this","Object","map","value","index","body","image","Panel","header","key","src","alt","React","Component","Settings","formEnabled","getSettings","getFormItem","setting","options","defaultValue","disabled","v","Option","bordered","hoverable","onClick","setState","checked","routes","path","component","Login","size","style","width","withRouter","mode","selectedKeys","location","pathname","Meta","description","App","className","firebase","_firebase","initializeApp","firebaseConfig","auth","database","onAuthStateChanged","loginSuccess","signUp","email","password","createUserWithEmailAndPassword","signIn","signInWithEmailAndPassword","fetchDashboard","fetchSettings","watchForActions","console","error","code","loginFail","signOut","ref","once","val","getDashboardSuccess","getDashboardFail","getSettingsSuccess","getSettingsFail","takeEvery","Boolean","window","hostname","match","run","saga","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6ff7833b.chunk.js","sourcesContent":["import { User } from 'firebase';\n\nexport interface IAction {\n  type: string;\n  [key: string]: any; // Payload could be any type or size\n}\n\nexport interface IDashboard {\n  [key: string]: {\n    label?: string;\n    image?: string;\n    body: string;\n  }\n}\n\nexport interface ISettingItem {\n    label: string;\n    type: 'select' | 'string' | 'image';\n    value: string;\n    options: { [key: string]: string | number }\n}\n\nexport interface ISettings {\n  [key: string]: ISettingItem;\n}\n\nexport interface IState {\n  user: User | null;\n  isLoggedIn: boolean;\n  dashboard: IDashboard | false;\n  settings: ISettings | false;\n  loading: boolean;\n}\n\nexport const initialState: IState = {\n  user: null,\n  isLoggedIn: false,\n  dashboard: false,\n  settings: false,\n  loading: false,\n};\n\nconst reducer = (state = initialState, action: IAction) => {\n  switch (action.type) {\n    case 'LOGIN':\n    case 'GET_DASHBOARD':\n    case 'GET_SETTINGS': {\n      return {\n        ...state,\n        loading: true,\n      }\n    }\n    case 'LOGIN_FAIL':\n    case 'GET_DASHBOARD_FAIL':\n    case 'GET_SETTINGS_FAIL': {\n      return {\n        ...state,\n        loading: false,\n      }\n    }\n    case 'LOGIN_SUCCESS': {\n      return {\n        ...state,\n        user: action.user,\n        isLoggedIn: action.user !== null,\n      }\n    }\n    case 'LOGOUT': {\n      return {\n        ...state,\n        user: null,\n        isLoggedIn: false,\n      }\n    }\n    case 'GET_DASHBOARD_SUCCESS': {\n      return {\n        ...state,\n        dashboard: action.dashboard,\n        loading: false,\n      }\n    }\n    case 'GET_SETTINGS_SUCCESS': {\n      return {\n        ...state,\n        settings: action.settings,\n        loading: false,\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { initialState } from '../reducers';\nimport reducers from '../reducers/index'\n\nexport const sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducers,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nexport default store;\n","import { IState } from '../reducers';\n\nexport const camelize = (str: string) => {\n  return str\n    .toLowerCase()\n    .replace(/_./g, (m) => m.toUpperCase())\n    .replace(/_/g, '')\n};\n\nexport const mapLoggedToProps = (state: IState) => {\n  const { isLoggedIn } = state;\n  return { isLoggedIn };\n};\n","import store from '../helpers/store';\nimport { camelize } from '../helpers/utils';\n\nconst dispatch = store.dispatch;\n\ninterface IPayload {\n  [key: string]: any;\n}\n\ninterface IActions {\n  [key: string]: (payload: IPayload) => void;\n}\n\nconst createAction =\n  (type: string) =>\n    (payload?: IPayload) =>\n      dispatch({ type, ...payload });\n\nconst createAsyncAction = (type: string) => {\n  const typeName = camelize(type);\n  return {\n    [typeName]: createAction(type),\n    [`${typeName}Success`]: createAction(`${type}_SUCCESS`),\n    [`${typeName}Fail`]: createAction(`${type}_FAIL`),\n  }\n};\n\nconst actions: IActions = {\n  ...createAsyncAction('LOGIN'),\n  ...createAsyncAction('GET_DASHBOARD'),\n  ...createAsyncAction('GET_SETTINGS'),\n  logout: createAction('LOGOUT'),\n};\n\nexport default actions;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\n\nimport actions from '../../actions';\nimport { mapLoggedToProps } from '../../helpers/utils';\n\ninterface ILoginProps {\n  isLoggedIn: boolean;\n}\n\nconst Login = (props: ILoginProps) => {\n  if (props.isLoggedIn) {\n    return <Redirect to=\"/dashboard\"/>\n  }\n\n  return (\n    <Form\n      onFinish={(values) => actions.login(values)}\n    >\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your email!' }]}\n      >\n        <Input/>\n      </Form.Item>\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password/>\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Login\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default connect(mapLoggedToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Empty, Collapse, Card } from 'antd';\n\nimport actions from '../../actions';\nimport { IState, IDashboard } from '../../reducers';\n\ninterface IDashboardProps {\n  dashboard: IDashboard | false;\n  loading: boolean;\n}\n\nexport class Dashboard extends React.Component<IDashboardProps> {\n  componentDidMount = () => {\n    actions.getDashboard({});\n  };\n\n  get content() {\n    const { dashboard } = this.props;\n\n    return (\n      <Collapse>\n        {Object.values(dashboard).map((value, index) => {\n          const {\n            label = '',\n            body,\n            image = false,\n          } = value;\n\n          return (\n            <Collapse.Panel\n              header={label}\n              key={index}\n            >\n              {image && <img src={image} alt=\"\"/>}\n              <br/>\n              <br/>\n              {body}\n            </Collapse.Panel>\n          );\n        })}\n      </Collapse>\n    )\n  }\n\n  render = () => {\n    const { dashboard } = this.props;\n\n    return (\n      <Card>\n        {dashboard\n          ? (\n            this.content\n          ) : (\n            <Empty/>\n          )}\n      </Card>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IState) => {\n  const { dashboard, loading } = state;\n  return { dashboard, loading };\n};\n\nexport default connect(mapStateToProps)(Dashboard);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Empty,\n  Card,\n  Select,\n  Input,\n  Checkbox,\n} from 'antd';\n\nimport actions from '../../actions';\nimport { IState, ISettings, ISettingItem } from '../../reducers';\n\ninterface IDashboardProps {\n  settings: ISettings | false;\n  loading: boolean;\n}\n\ninterface IDashboardState {\n  formEnabled: boolean;\n}\n\nexport class Settings extends React.Component<IDashboardProps, IDashboardState> {\n  state = { formEnabled: false };\n\n  componentDidMount = () => {\n    actions.getSettings({});\n  };\n\n  getFormItem = (setting: ISettingItem) => {\n    const { formEnabled } = this.state;\n    const {\n      type,\n      value,\n      options,\n    } = setting;\n\n    switch (type) {\n      case 'image': {\n        return (\n          <div>\n            <Card>\n              <img src={value} alt=\"\"/>\n            </Card>\n            <Input\n              defaultValue={value}\n              disabled={!formEnabled}\n            />\n          </div>\n        )\n      }\n      case 'select': {\n        return (\n          <Select\n            defaultValue={value}\n            disabled={!formEnabled}\n          >\n            {Object.values(options).map(v => (\n              <Select.Option value={v} key={v}>\n                {v}\n              </Select.Option>\n            ))}\n          </Select>\n        )\n      }\n      case 'string':\n      default: {\n        return (\n          <Input\n            defaultValue={value}\n            disabled={!formEnabled}\n          />\n        )\n      }\n    }\n  };\n\n  get content() {\n    const { settings } = this.props;\n    const { formEnabled } = this.state;\n\n    return (\n      <div>\n        {Object.values(settings).map((value) => (\n          <Card bordered={false}>\n            {value.label}\n            <br/>\n            {this.getFormItem(value)}\n          </Card>\n        ))}\n        <Card\n          hoverable\n          onClick={() => this.setState({ formEnabled: !formEnabled })}\n        >\n          Enable inputs {formEnabled && ' (they still can\\'t be saved)'}\n          <br/>\n          <Checkbox checked={formEnabled}/>\n        </Card>\n      </div>\n    )\n  }\n\n  render = () => {\n    const { settings } = this.props;\n\n    return (\n      <Card>\n        {settings\n          ? (\n            this.content\n          ) : (\n            <Empty/>\n          )}\n      </Card>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IState) => {\n  const { settings, loading } = state;\n  return { settings, loading };\n};\n\nexport default connect(mapStateToProps)(Settings);\n","import { ConnectedComponent } from 'react-redux';\n\nimport Login from '../components/Login';\nimport Dashboard from '../components/Dashboard';\nimport Settings from '../components/Settings';\nimport Logout from '../components/Logout';\n\nexport interface IRoute {\n  label: string;\n  path: string;\n  component: ConnectedComponent<any, any>;\n  isLoggedIn?: boolean;\n}\n\nconst routes: IRoute[] = [\n  {\n    label: 'Login',\n    path: '/login',\n    component: Login,\n    isLoggedIn: false,\n  },\n  {\n    label: 'Dashboard',\n    path: '/dashboard',\n    component: Dashboard,\n    isLoggedIn: true,\n  },\n  {\n    label: 'Settings',\n    path: '/settings',\n    component: Settings,\n    isLoggedIn: true,\n  },\n  {\n    label: 'Logout',\n    path: '/logout',\n    component: Logout,\n    isLoggedIn: true,\n  },\n];\n\nexport default routes;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { Button, Avatar } from 'antd';\n\nimport actions from '../../actions';\nimport { mapLoggedToProps } from '../../helpers/utils';\n\ninterface ILogoutProps {\n  isLoggedIn: boolean;\n}\n\nconst byeLink = 'https://cdn.lowgif.com/full/fc3d7d9abd06a92e-hi-bear-gifs-get-the-best-gif-on-giphy.gif';\n\nconst Logout = (props: ILogoutProps) => {\n  if (!props.isLoggedIn) {\n    return <Redirect to=\"/login\"/>\n  }\n\n  return (\n    <div>\n      <Avatar\n        src={byeLink}\n        size={256}\n      />\n      <br/>\n      <br/>\n      <Button\n        type=\"danger\"\n        size=\"large\"\n        onClick={() => actions.logout({})}\n        style={{ width: '100%' }}\n      >\n        Logout\n      </Button>\n    </div>\n  )\n};\n\nexport default connect(mapLoggedToProps)(Logout);\n","import React from 'react';\nimport { Menu as AntdMenu } from 'antd';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport routes, { IRoute } from '../../configs/routes';\nimport { mapLoggedToProps } from '../../helpers/utils';\n\ninterface IMenuProps extends RouteComponentProps {\n  isLoggedIn: boolean;\n}\n\nfunction Menu(props: IMenuProps) {\n  return (\n    <AntdMenu\n      style={{ width: 256 }}\n      mode=\"inline\"\n      selectedKeys={[props.location.pathname]}\n    >\n      {routes.map((value: IRoute) => (value.isLoggedIn === props.isLoggedIn) && (\n        <AntdMenu.Item\n          key={value.path}\n          disabled={value.path === props.location.pathname}\n        >\n          <Link to={value.path}>\n            {value.label}\n          </Link>\n        </AntdMenu.Item>\n      ))}\n    </AntdMenu>\n  );\n}\n\nexport default connect(mapLoggedToProps)(withRouter(Menu));\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Button, Empty, Card } from 'antd';\n\nimport routes, { IRoute } from '../../configs/routes';\nimport { mapLoggedToProps } from '../../helpers/utils';\n\ninterface IRouterProps {\n  isLoggedIn: boolean;\n}\n\nfunction Router(props: IRouterProps) {\n  return (\n    <Switch>\n      {routes.map((value: IRoute) =>\n        (\n          <Route\n            key={value.path}\n            path={value.path}\n            component={value.component}\n          />\n        ))\n      }\n      <Route path='/'>\n        <Card>\n          <Empty/>\n          <br/>\n          <Card.Meta description={\n            <Link to='/login'>\n              <Button\n                type='primary'\n                style={{ width: '100%' }}\n              >\n                Go to working page\n              </Button>\n            </Link>\n          }/>\n        </Card>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default connect(mapLoggedToProps)(Router);\n","import React from 'react';\nimport Menu from './components/Menu';\nimport { BrowserRouter } from 'react-router-dom';\nimport Router from './components/Router';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Menu/>\n      <div className=\"app\">\n        <Router/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import _firebase from 'firebase';\n\nimport firebaseConfig from '../configs/firebase.json';\nimport actions from '../actions';\n\nconst firebase = _firebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst database = firebase.database();\n\nauth.onAuthStateChanged((user) => {\n  if (user) {\n    actions.loginSuccess({ user });\n  } else {\n    actions.logout({});\n  }\n});\n\nexport const signUp = (email: string, password: string) => {\n  return auth.createUserWithEmailAndPassword(email, password)\n};\n\nexport const signIn = (email: string, password: string) => {\n  return auth.signInWithEmailAndPassword(email, password)\n};\n\nexport const signOut = () => {\n  return auth.signOut();\n};\n\nexport const getDashboard = () => {\n  return database.ref('dashboard').once('value', );\n};\nexport const getSettings = () => {\n  return database.ref('settings').once('value', );\n};\n\nexport default firebase;\n","import { signUp, signIn, signOut, getDashboard, getSettings } from '../helpers/firebase';\nimport { takeEvery } from 'redux-saga/effects';\nimport { AnyAction } from 'redux';\nimport actions from '../actions';\n\nfunction* login(action: AnyAction) {\n  const { email, password } = action;\n  try {\n    const user = yield signIn(email, password);\n    actions.loginSuccess({ user });\n  } catch (error) {\n    console.error(error);\n    if (error.code === 'auth/user-not-found') {\n      const user = yield signUp(email, password);\n      actions.loginSuccess({ user });\n    } else {\n      actions.loginFail({ error });\n    }\n  }\n}\n\nfunction* logout() {\n  yield signOut();\n}\n\nfunction* fetchDashboard() {\n  try {\n    const dashboard = (yield getDashboard()).val();\n    actions.getDashboardSuccess({ dashboard });\n  } catch(error) {\n    console.error(error);\n    actions.getDashboardFail({ error });\n  }\n}\n\nfunction* fetchSettings() {\n  try {\n    const settings = (yield getSettings()).val();\n    actions.getSettingsSuccess({ settings });\n  } catch(error) {\n    console.error(error);\n    actions.getSettingsFail({ error });\n  }\n}\n\nexport default function* watchForActions() {\n  yield takeEvery('LOGIN', login);\n  yield takeEvery('LOGOUT', logout);\n  yield takeEvery('GET_DASHBOARD', fetchDashboard);\n  yield takeEvery('GET_SETTINGS', fetchSettings);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport saga from './sagas';\nimport store, { sagaMiddleware } from './helpers/store';\nimport * as serviceWorker from './serviceWorker';\n\nsagaMiddleware.run(saga);\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}